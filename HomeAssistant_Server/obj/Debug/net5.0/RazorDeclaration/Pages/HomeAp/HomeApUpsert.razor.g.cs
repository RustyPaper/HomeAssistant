// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace HomeAssistant_Server.Pages.HomeAp
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using System.Net.Http

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using Microsoft.AspNetCore.Authorization

#nullable disable
    ;
#nullable restore
#line 3 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization

#nullable disable
    ;
#nullable restore
#line 4 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms

#nullable disable
    ;
#nullable restore
#line 5 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing

#nullable disable
    ;
#nullable restore
#line 6 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Web

#nullable disable
    ;
#nullable restore
#line 7 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization

#nullable disable
    ;
#nullable restore
#line 8 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using Microsoft.JSInterop

#nullable disable
    ;
#nullable restore
#line 9 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using HomeAssistant_Server

#nullable disable
    ;
#nullable restore
#line 10 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using HomeAssistant_Server.Shared

#nullable disable
    ;
#nullable restore
#line 11 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using HomeAssistant_Server.Helper

#nullable disable
    ;
#nullable restore
#line 12 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using Blazored.TextEditor

#nullable disable
    ;
#nullable restore
#line 13 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\_Imports.razor"
using Radzen.Blazor

#nullable disable
    ;
#nullable restore
#line 3 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
 using Models

#nullable disable
    ;
#nullable restore
#line 4 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
 using Business.Repository.IRepository

#nullable disable
    ;
#nullable restore
#line 5 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
 using HomeAssistant_Server.Service.IService

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Components.RouteAttribute(
    // language=Route,Component
#nullable restore
#line 1 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
      "/home-apartament/create"

#line default
#line hidden
#nullable disable
    )]
    [global::Microsoft.AspNetCore.Components.RouteAttribute(
    // language=Route,Component
#nullable restore
#line 2 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
      "/home-apartament/edit/{Id:int}"

#line default
#line hidden
#nullable disable
    )]
    #nullable restore
    public partial class HomeApUpsert : global::Microsoft.AspNetCore.Components.ComponentBase
    #nullable disable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 113 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
       

    [Parameter]
    //determines whether create or edit
    public int? Id { get; set; }

    private HomeApDTO HomeApModel { get; set; } = new HomeApDTO();

    private string Title { get; set; } = "Create";

    private HomeApImageDTO ApartamentImage { get; set; } = new HomeApImageDTO();

    private List<string> DeletedImageNames { get; set; }

    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState{ get; set; }


    private bool IsImageUploadProcessStarted { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState;

        //check if admin is logged in
        if (!authenticationState.User.IsInRole(CommonFiles.SD.Role_Admin))
        {
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
        }

        if (Id != null)
        {
            //updating
            Title = "Update";
            HomeApModel = await HomeApRepository.GetHomeAp(Id.Value);
            if (HomeApModel?.HomeApImages != null)
            {
                HomeApModel.ImageUrls = HomeApModel.HomeApImages.Select(u => u.ApartamentImageURL).ToList();
            }
        }
        else
        {
            //create
            HomeApModel = new HomeApDTO();
        }

    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(HomeApModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(HomeApModel.Details);
                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = false;
            }

        }
        if (!string.IsNullOrEmpty(HomeApModel.Details))
        {
            await this.QuillHtml.LoadHTMLContent(HomeApModel.Details);
        }
    }

    private async Task HandleHomeApUpsert()
    {
        try
        {


            if (HomeApModel.Id != 0 && Title == "Update")
            {

                //if the Id is not null, we're updating the home apartament
                HomeApModel.Details = await QuillHtml.GetHTML();


                //update

                var updateApartamentResult = await HomeApRepository.UpdateHomeAp(HomeApModel.Id, HomeApModel);

                if (HomeApModel.ImageUrls != null && HomeApModel.ImageUrls.Any())
                {
                    if (DeletedImageNames != null && DeletedImageNames.Any())
                    {
                        foreach (var deletedImageName in DeletedImageNames)
                        {
                            var imageName = deletedImageName.Replace($"{NavigationManager.BaseUri}ApartamentImages/", "");

                            var result = FileUpload.DeleteFile(imageName);
                            await HomeImagesRepository.DeleteHomeImageByImageUrl(deletedImageName);
                        }
                    }



                    await AddHomeApImage(updateApartamentResult);
                }
                await JsRuntime.ToastrSuccess("Home apartament updated successfully.");
            }
            else
            {
                //create
                HomeApModel.Details = await QuillHtml.GetHTML();
                var createdResult = await HomeApRepository.CreateHomeAp(HomeApModel);
                await AddHomeApImage(createdResult);
                await JsRuntime.ToastrSuccess("Home apartament created successfully.");
            }
        }
        catch (Exception ex)
        {
            //log exceptions
        }



        NavigationManager.NavigateTo("home-apartament");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (HomeApModel.ImageUrls != null && HomeApModel.ImageUrls.Any())
                    {
                        HomeApModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        HomeApModel.ImageUrls = new List<string>();
                        HomeApModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Image uploading failed");
                    return;
                }
            }
            IsImageUploadProcessStarted = false;
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }



    }

    private async Task AddHomeApImage(HomeApDTO apartamentDetails)
    {
        foreach (var imageUrl in HomeApModel.ImageUrls)
        {
            if (HomeApModel.HomeApImages.Where(x => x.ApartamentImageURL == imageUrl).Count() == 0)
            {

                ApartamentImage = new HomeApImageDTO()
                    {
                        ApartamentId = apartamentDetails.Id,
                        ApartamentImageURL = imageUrl
                    };
                await HomeImagesRepository.CreateHomeApImage(ApartamentImage);
            }
        }
    }

    private async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = HomeApModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}ApartamentImages/", "");
            if (HomeApModel.Id == 0 && Title == "Create")
            {
                var result = FileUpload.DeleteFile(imageName);
            }
            else
            {
                //update
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
            }
            HomeApModel.ImageUrls.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }
    }

#line default
#line hidden
#nullable disable

        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 10 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
        IFileUpload

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 10 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
                    FileUpload

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 9 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
        IJSRuntime

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 9 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
                   JsRuntime

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 8 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
        NavigationManager

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 8 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
                          NavigationManager

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 7 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
        IHomeImagesRepository

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 7 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
                              HomeImagesRepository

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private 
#nullable restore
#line 6 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
        IHomeApRepository

#line default
#line hidden
#nullable disable
         
#nullable restore
#line 6 "C:\Users\Adrian\Desktop\KodBlazor\HomeAssistant\HomeAssistant_Server\Pages\HomeAp\HomeApUpsert.razor"
                          HomeApRepository

#line default
#line hidden
#nullable disable
         { get; set; }
         = default!;
    }
}
#pragma warning restore 1591
