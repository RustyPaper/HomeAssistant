@page "/home-amenity/create"
@page "/home-amenity/edit/{Id:int}"
@using Business.Repository.IRepository
@using Models
@inject IHomeAmenityRepository AmenityRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Home Amenity</h3>

    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                @* First Keep On Submit then change to onValidSubmit *@
                <EditForm Model="@HomeAmenityModel" OnValidSubmit="HandleHomeAmenityCreate">
                    <DataAnnotationsValidator />
                    @*Show validation summary <ValidationSummary/>*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HomeAmenityModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>HomeAmenityModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <InputTextArea @bind-Value="HomeAmenityModel.Description" class="form-control"></InputTextArea>
                        <ValidationMessage For="()=>HomeAmenityModel.Description"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Timing</label>
                        <InputText @bind-Value="HomeAmenityModel.Timming" class="form-control"></InputText>
                        <ValidationMessage For="()=>HomeAmenityModel.Timming"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Icon Style</label>
                        <InputText @bind-Value="HomeAmenityModel.IconStyle" class="form-control"></InputText>
                        <ValidationMessage For="()=>HomeAmenityModel.IconStyle"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <button class="btn btn-primary"> @Title Amenity </button>
                        <NavLink href="@($"home-amenity")" class="btn btn-secondary">Back to Index </NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public int? Id { get; set; }
    //instantiate right away
    internal HomeAmenityDTO HomeAmenityModel { get; set; } = new HomeAmenityDTO();

    internal string Title { get; set; } = "Create";

    internal bool IsProcessingStart { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //we work with update
            Title = "Update";

            HomeAmenityModel = await AmenityRepository.GetHomeAmenity(Id.Value);
        }
        else
        {
            HomeAmenityModel = new HomeAmenityDTO();
        }
    }



    internal async Task HandleHomeAmenityCreate()
    {
        try
        {
            IsProcessingStart = true;

            if (HomeAmenityModel.Id != 0 && Title == "Update")
            {
                var amenityDetailsByName = await AmenityRepository.IsSameNameAmenityAlreadyExists(HomeAmenityModel.Name);

                if (amenityDetailsByName != null && amenityDetailsByName.Id != HomeAmenityModel.Id)
                {
                    await jsRuntime.ToastrError("Home Amenity already exists.");
                    return;
                }
                //Update the home amenity here
                var updateAmenityResult = await AmenityRepository.UpdateHomeAmenity(HomeAmenityModel.Id, HomeAmenityModel);


                await jsRuntime.ToastrSuccess("Home Amenity updated successfully.");
            }
            else
            {
                //Create new Home Amenity here
                var createdResult = await AmenityRepository.CreateHomeAmenity(HomeAmenityModel);
                HomeAmenityModel = new HomeAmenityDTO();
                await jsRuntime.ToastrSuccess("Home amenity created successfully.");

            }
            NavigationManager.NavigateTo("home-amenity");
            IsProcessingStart = false;

        }
        catch (Exception e)
        {
            IsProcessingStart = false;
        }
    }


} 