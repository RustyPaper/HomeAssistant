@page "/apartament-bookings"
@using Models
@using Business.Repository.IRepository
@using Radzen
@inject IApartamentOrderDetailsRepository apartamentOrderDetailsrepository
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@*@attribute [Authorize(Roles = CommonFiles.SD.Role_Admin)]*@

@if (!isLoading)
{
    <h4 class="card-title text-info">Bookings</h4>
    <RadzenGrid AllowFiltering="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterMode="FilterMode.Advanced" AllowPaging="true" PageSize="15"
                AllowSorting="true" Data="@ApartamentOrders" TItem="ApartamentOrderDetailsDTO" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="ApartamentOrderDetailsDTO" Property="Name" Title="Customer Name" />
            <RadzenGridColumn TItem="ApartamentOrderDetailsDTO" Property="Phone" Title="Phone Number" />
            <RadzenGridColumn TItem="ApartamentOrderDetailsDTO" Property="ApartamentId" Title="Apartament Identifer" />
            <RadzenGridColumn TItem="ApartamentOrderDetailsDTO" Property="HomeApDTO.Name" Title="Apartament" />
            <RadzenGridColumn TItem="ApartamentOrderDetailsDTO" Property="Status" Title="Status" />
            <RadzenGridColumn TItem="ApartamentOrderDetailsDTO" Property="CheckInDate" Title="Check-in Date"/>
              <RadzenGridColumn TItem="ApartamentOrderDetailsDTO" Property="CheckOutDate" Title="Check-out Date">
                <Template Context="data">
                    @String.Format("{0:d}", data.CheckInDate)
                </Template>
            </RadzenGridColumn>

            <RadzenGridColumn TItem="ApartamentOrderDetailsDTO" Property="Id" Title="">
                <Template Context="data">
                    <NavLink class="btn btn-primary" href="@($"apartament-bookings/details/{data.Id}")">Details</NavLink>
                    <NavLink class="btn btn-danger text-white cursor-pointer" @onclick="()=>BookingDelete(data.Id)">Delete</NavLink>
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}
else
{
    <p>loading...</p>
}



@code {
    //List of apartament orders of type ApartamentOrderDetailsDTO
    private IEnumerable<ApartamentOrderDetailsDTO> ApartamentOrders { get; set; } = new List<ApartamentOrderDetailsDTO>();
    private bool isLoading { get; set; } = false;
    internal int? DeleteBookingId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        //Get all the apartament order details from the apartamentOrderDetails repo which contains the GetAllApartamentOrderDetail method
        ApartamentOrders = await apartamentOrderDetailsrepository.GetAllApartamentOrderDetail();
        isLoading = false;
    }

    public async Task BookingDelete(int bookingId){

        DeleteBookingId = bookingId;

        if(DeleteBookingId != null)
        {

            try
            {
                await apartamentOrderDetailsrepository.DeleteBooking(bookingId);
                await jsRuntime.ToastrSuccess("Booking Deleted");

            } catch (Exception ex){
                throw ex;
            }
            ApartamentOrders = await apartamentOrderDetailsrepository.GetAllApartamentOrderDetail();
        }

    }
}
