@page "/home/apartament-details/{Id:int}"
@using Model
@inject IJSRuntime jsRuntime
@inject ILocalStorageService localStorage
@inject IHomeApService homeApService
@inject IStripePaymentService stripePaymentService
@inject IApartamentOrderDetailsService apartamentOrderDetailsService
@inject NavigationManager NavigationManager

@if (HomeBooking?.orderDetails?.HomeApDTO?.HomeApImages == null)
{
    <div class="spinner"></div>
}
else
{
    <div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">
 <div class="row p-2 my-3 " style="border-radius:20px; ">
            <div class="col-12 col-lg-7 p-4" >
                <div class="row px-2 text-primary border-bottom">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Selected Apartament</p></div>
                    <div class="col-4 p-0 float-right">
                        <a href="home/apartaments" class="btn btn-secondary btn-block" style = "margin-left: 75px !important;">Return to Apartament Selection</a></div>
                </div>

                <div class="row">
                    <div class="col-12">
                        <div id="" class="carousel slide mb-4 m-md-3 m-0 pt-3 pt-md-0" data-ride="carousel">
                            <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                                <ol class="carousel-indicators">
                                @{
                                int imageIndex = 0;
                                int innerImageIndex = 0;
                                }
                                @foreach (var image in HomeBooking.orderDetails.HomeApDTO.HomeApImages){
                                if (imageIndex == 0)
                                {
                                <li data-target="#carouselExampleIndicators" data-slide-to="@imageIndex" class="active"></li>

                                }
                                else
                                {
                                <li data-target="#carouselExampleIndicators" data-slide-to="@imageIndex"></li>
                                }
                                imageIndex++;
                                }
                            </ol>
                            <div class="carousel-inner">
                                @foreach (var image in HomeBooking.orderDetails.HomeApDTO.HomeApImages)
                                {
                                if (innerImageIndex == 0)
                                {
                                <div class="carousel-item active">
                                    <img class="d-block w-100" style="border-radius:20px;" src="@image.ApartamentImageURL" alt="First slide">
                                </div>
                                }
                                else
                                {
                                <div class="carousel-item">
                                    <img class="d-block w-100" style="border-radius:20px;" src="@image.ApartamentImageURL" alt="First slide">
                                </div>
                                }

                                innerImageIndex++;
                                }
                            </div>
                            <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </a>
                            <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </a>
                            </div>
                        </div>
                    </div>
                    
                </div>
                <div class="row p-2">
                    <div class="col-12">
                        <p class="card-title" style="font-size:xx-large; text-black">@HomeBooking.orderDetails.HomeApDTO.Name</p>
                        <p class="card-text" style="font-size:large">
                            @((MarkupString)@HomeBooking.orderDetails.HomeApDTO.Details)
                        </p>
                    </div>

                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0" >
            <div class="row  text-primary border-bottom">
                <div class="col-7 "><p style="font-size:x-large;margin:0px;">Apartament Information</p></div></div>
                <div>
                  <h4 class="font-weight-bold mt-2 ml-2 text-black" >
                      @HomeBooking.orderDetails.HomeApDTO.Name
                            </h4>
                            <span class="ml-2">Max Occupancy : @HomeBooking.orderDetails.HomeApDTO.Occupancy adults </span><br />
                            <span class="ml-2 pt-1">Villa Size : @HomeBooking.orderDetails.HomeApDTO.SqFt sqft</span><br />

                             @if(HomeBooking.orderDetails.HomeApDTO.StayLength > 1)
                                        {
                                            <span class="ml-2">Cost for @HomeBooking.orderDetails.HomeApDTO.StayLength nights stay: $@HomeBooking.orderDetails.HomeApDTO.Cost</span>
                                        }
                                        else
                                        {
                                           <span class="ml-2">Cost for @HomeBooking.orderDetails.HomeApDTO.StayLength night stay: $@HomeBooking.orderDetails.HomeApDTO.Cost </span>
                                        }
                       </div>
                <EditForm Model="HomeBooking" class="container" OnValidSubmit="HandleCheckout">

                   <div class="row px-2 text-success border-bottom"></div>
                    <div class="form-group pt-2">
                        <label class=" ">Name</label>
                        <InputText @bind-Value="HomeBooking.orderDetails.Name" type="text" class="form-control" style = "border: 1px solid rgb(154, 169, 222);" />
                    </div>
                    <div class="form-group pt-2">
                        <label class=" ">Phone</label>
                        <InputText @bind-Value="HomeBooking.orderDetails.Phone" type="text" class="form-control" style = "border: 1px solid rgb(154, 169, 222);"/>
                    </div>
                    <div class="form-group">
                        <label class=" ">Email</label>
                        <InputText @bind-Value="HomeBooking.orderDetails.Email" type="text" class="form-control"style = "border: 1px solid rgb(154, 169, 222);" />
                    </div>
                    <div class="form-group">
                        <label class=" ">Check in Date</label>
                        <InputDate @bind-Value="HomeBooking.orderDetails.CheckInDate" type="date" disabled class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class=" ">Check out Date</label>
                        <InputDate @bind-Value="HomeBooking.orderDetails.CheckOutDate" type="date" disabled="disabled" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class=" ">Length of stay</label> <br />
                        <span>@HomeBooking.orderDetails.HomeApDTO.StayLength nights</span>
                    </div>
                    <div class="form-group mt-1">
                        <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}
@code {
    [Parameter]
    public int? Id { get; set; }

    public HomeApBookingViewModel HomeBooking { get; set; } = new HomeApBookingViewModel();
    private int NoOfNights { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Task.Delay(5000);
            HomeBooking.orderDetails = new ApartamentOrderDetailsDTO();
            if (Id != null)
            {
                //check if the local storage is not empty (in reality it never will be)
                if (await localStorage.GetItemAsync<HomeVM>(SD.Local_InitialBooking) != null)
                {
                    var apartamentInitialInfo = await localStorage.GetItemAsync<HomeVM>(SD.Local_InitialBooking);

                    //transfer information about booking from local storage into the viewmodel
                    //inside the viewmodel, pass that information into the DTO

                    HomeBooking.orderDetails.HomeApDTO = await homeApService.GetHomeApById(Id.Value,
                        apartamentInitialInfo.StartDate.ToString("dd/MM/yyyy"), apartamentInitialInfo.EndDate.ToString("dd/MM/yyyy"));

                    NoOfNights = apartamentInitialInfo.NoOfNights;

                    HomeBooking.orderDetails.CheckInDate = apartamentInitialInfo.StartDate;
                    HomeBooking.orderDetails.CheckOutDate = apartamentInitialInfo.EndDate;
                    HomeBooking.orderDetails.HomeApDTO.StayLength = apartamentInitialInfo.NoOfNights;
                    HomeBooking.orderDetails.HomeApDTO.Cost =
                        apartamentInitialInfo.NoOfNights * HomeBooking.orderDetails.HomeApDTO.Rate;
                }
                else
                {
                   await jsRuntime.ToastrError("Please select a check in date");
                }
            }
        }
        catch (Exception e)
        {
            throw e;
        }
    }

    private async Task HandleCheckout()
    {
        if (!await HandleValidation())
        {
            return;
        }

        try
        {
            var paymentDTO = new StripePaymentDTO()
            {
                Cost = Convert.ToInt32(HomeBooking.orderDetails.HomeApDTO.Cost * 100),
                ProductName = HomeBooking.orderDetails.HomeApDTO.Name,
                ReturnURL = "/home/apartament-details/" + Id
            };

            //Accesing the stripePaymentService 
            //await success
            var result = await stripePaymentService.CheckOutCompleted(paymentDTO);

            //populate remaining attributes from orderDetails

            HomeBooking.orderDetails.StripeSessionId = result.Data.ToString();
            HomeBooking.orderDetails.ApartamentId = HomeBooking.orderDetails.HomeApDTO.Id;
            HomeBooking.orderDetails.TotalCost = HomeBooking.orderDetails.HomeApDTO.Cost;

            var apartamentOrderDetailsSaved = await apartamentOrderDetailsService.SaveApartamentOrderDetails(HomeBooking.orderDetails);

            await localStorage.SetItemAsync(SD.Local_ApartamentOrderDetails, apartamentOrderDetailsSaved);

            await jsRuntime.InvokeVoidAsync("redirectToCheckout", result.Data.ToString());
        }
        catch (Exception e)
        {
            await jsRuntime.ToastrError(e.Message);
        }
    }

    private async Task<bool> HandleValidation()
    {
        if (string.IsNullOrEmpty(HomeBooking.orderDetails.Name))
        {
            await jsRuntime.ToastrError("Name cannot be empty");
            return false;
        }
        if (string.IsNullOrEmpty(HomeBooking.orderDetails.Phone))
        {
            await jsRuntime.ToastrError("Phone cannot be empty");
            return false;
        }

        if (string.IsNullOrEmpty(HomeBooking.orderDetails.Email))
        {
            await jsRuntime.ToastrError("Email cannot be empty");
            return false;
        }
        return true;

    }
}